// Code generated by go-bindata.
// sources:
// 000001_init.down.sql
// 000001_init.up.sql
// 000002_log.down.sql
// 000002_log.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\x2d\x29\xca\x4c\xb6\xe6\xc2\x2a\x99\x5c\x82\x4b\x22\x3f\x2f\x2d\x33\xdd\x9a\x0b\x10\x00\x00\xff\xff\xcc\xc4\x2f\x49\x53\x00\x00\x00")

func _000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initDownSql,
		"000001_init.down.sql",
	)
}

func _000001_initDownSql() (*asset, error) {
	bytes, err := _000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.down.sql", size: 83, mode: os.FileMode(420), modTime: time.Unix(1597495004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcf\x4e\xf3\x30\x10\xc4\xef\x7e\x8a\x39\x26\x52\xdf\xe0\x3b\xf9\x73\x37\x95\x85\xe3\x84\xcd\x5a\xa2\xa7\x2a\x6a\x0d\xb2\x44\xd2\x0a\x0c\xe2\xf1\x51\x12\xfe\x48\x50\x51\x81\x8f\xb3\xbb\xe3\xdf\x8c\x61\xd2\x42\x10\xfd\xdf\x91\xb2\x15\x7c\x23\xa0\x1b\xdb\x49\x87\x21\xe6\x87\xb4\x57\x85\x02\x80\x74\x80\xf5\x42\x1b\xe2\x79\xc5\x07\xe7\xd0\xb2\xad\x35\x6f\x71\x45\xdb\xd5\xbc\x34\xf6\x43\x44\x8e\x2f\x59\x95\xff\x94\xfa\xc1\x7a\x9f\x7f\x63\x9b\xd3\x10\x1f\x73\x3f\x9c\xb0\xd6\x42\x62\x6b\xc2\x9a\x2a\x1d\x9c\xc0\x04\x66\xf2\xb2\x9b\xc4\x4e\x74\xdd\x2e\x17\x0b\xfa\xee\x8c\xfb\x32\x7f\xee\xef\x9f\x22\xd2\x98\xbf\xe8\x55\xc3\x64\x37\x7e\xfa\xba\xf8\xf0\x28\xc1\x54\x11\x93\x37\xf4\x5e\x4a\x91\x0e\xe5\xc5\x8c\xc7\xf1\x36\xdd\xe1\x2d\xe8\x25\xa2\xe3\x29\xcf\xcd\x7d\x07\x3d\x27\x07\x6f\xaf\x03\x7d\x22\xae\xa6\xfb\x72\x1e\x4d\xaf\xf1\x30\x8d\xaf\x9c\x35\x02\xa6\xd6\x69\x43\x7f\xcb\xf7\x1a\x00\x00\xff\xff\x10\x01\xe1\xc0\x1e\x02\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 542, mode: os.FileMode(420), modTime: time.Unix(1597495004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_logDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\xc9\x4f\xb7\xe6\x02\x04\x00\x00\xff\xff\xc4\x63\xa8\x38\x1a\x00\x00\x00")

func _000002_logDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_logDownSql,
		"000002_log.down.sql",
	)
}

func _000002_logDownSql() (*asset, error) {
	bytes, err := _000002_logDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_log.down.sql", size: 26, mode: os.FileMode(420), modTime: time.Unix(1598100005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_logUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x4a\x03\x31\x18\x84\xef\x79\x8a\x39\x6e\xa0\x6f\xe0\x29\x6e\x27\x25\x98\x4d\xeb\x9f\x3f\x60\x4f\xa5\xd8\x45\x02\x5d\x15\x8d\x3e\xbf\xb4\x2b\x2b\x48\xaf\x33\xdf\xf0\x4d\x2f\x74\x4a\xa8\xbb\x8f\x34\xc1\x23\x6d\x15\x7c\x0a\x59\x33\xce\x6f\x2f\xa6\x33\x00\x50\x4f\x08\x49\xb9\xa1\x5c\xfb\x54\x62\xc4\x4e\xc2\xe0\x64\x8f\x07\xee\x57\x57\x68\x1a\xdb\x47\x7d\x3e\xdc\x60\xe7\xfe\xfb\x78\xfe\x1a\x51\x5f\xdb\xbf\xbc\xd5\x69\xfc\x6c\xc7\xe9\x1d\x6b\xa7\xd4\x30\x10\x6b\x7a\x57\xa2\xa2\x2f\x22\x4c\x7a\xb8\x84\x59\xdd\xb0\x9b\x17\x7e\x2b\x0c\x9b\x74\x51\x77\x8b\xd5\x42\xe8\x29\x4c\x3d\xf3\xef\x97\xae\x9e\xec\xbc\x28\x29\x3c\x16\xfe\xc1\xab\x45\x6a\x8d\xbd\x33\x3f\x01\x00\x00\xff\xff\xee\x6e\xef\x21\x05\x01\x00\x00")

func _000002_logUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_logUpSql,
		"000002_log.up.sql",
	)
}

func _000002_logUpSql() (*asset, error) {
	bytes, err := _000002_logUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_log.up.sql", size: 261, mode: os.FileMode(420), modTime: time.Unix(1598099996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.down.sql": _000001_initDownSql,
	"000001_init.up.sql": _000001_initUpSql,
	"000002_log.down.sql": _000002_logDownSql,
	"000002_log.up.sql": _000002_logUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.down.sql": &bintree{_000001_initDownSql, map[string]*bintree{}},
	"000001_init.up.sql": &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_log.down.sql": &bintree{_000002_logDownSql, map[string]*bintree{}},
	"000002_log.up.sql": &bintree{_000002_logUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Metric is an object representing the database table.
type Metric struct {
	ID   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *metricR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metricL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetricColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var MetricTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "metric.id",
	Name: "metric.name",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MetricWhere = struct {
	ID   whereHelperint64
	Name whereHelpernull_String
}{
	ID:   whereHelperint64{field: "\"metric\".\"id\""},
	Name: whereHelpernull_String{field: "\"metric\".\"name\""},
}

// MetricRels is where relationship names are stored.
var MetricRels = struct {
	Configs string
	Logs    string
}{
	Configs: "Configs",
	Logs:    "Logs",
}

// metricR is where relationships are stored.
type metricR struct {
	Configs ConfigSlice `boil:"Configs" json:"Configs" toml:"Configs" yaml:"Configs"`
	Logs    LogSlice    `boil:"Logs" json:"Logs" toml:"Logs" yaml:"Logs"`
}

// NewStruct creates a new relationship struct
func (*metricR) NewStruct() *metricR {
	return &metricR{}
}

func (r *metricR) GetConfigs() ConfigSlice {
	if r == nil {
		return nil
	}
	return r.Configs
}

func (r *metricR) GetLogs() LogSlice {
	if r == nil {
		return nil
	}
	return r.Logs
}

// metricL is where Load methods for each relationship are stored.
type metricL struct{}

var (
	metricAllColumns            = []string{"id", "name"}
	metricColumnsWithoutDefault = []string{}
	metricColumnsWithDefault    = []string{"id", "name"}
	metricPrimaryKeyColumns     = []string{"id"}
	metricGeneratedColumns      = []string{"id"}
)

type (
	// MetricSlice is an alias for a slice of pointers to Metric.
	// This should almost always be used instead of []Metric.
	MetricSlice []*Metric
	// MetricHook is the signature for custom Metric hook methods
	MetricHook func(context.Context, boil.ContextExecutor, *Metric) error

	metricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metricType                 = reflect.TypeOf(&Metric{})
	metricMapping              = queries.MakeStructMapping(metricType)
	metricPrimaryKeyMapping, _ = queries.BindMapping(metricType, metricMapping, metricPrimaryKeyColumns)
	metricInsertCacheMut       sync.RWMutex
	metricInsertCache          = make(map[string]insertCache)
	metricUpdateCacheMut       sync.RWMutex
	metricUpdateCache          = make(map[string]updateCache)
	metricUpsertCacheMut       sync.RWMutex
	metricUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metricAfterSelectHooks []MetricHook

var metricBeforeInsertHooks []MetricHook
var metricAfterInsertHooks []MetricHook

var metricBeforeUpdateHooks []MetricHook
var metricAfterUpdateHooks []MetricHook

var metricBeforeDeleteHooks []MetricHook
var metricAfterDeleteHooks []MetricHook

var metricBeforeUpsertHooks []MetricHook
var metricAfterUpsertHooks []MetricHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Metric) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Metric) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Metric) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Metric) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Metric) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Metric) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Metric) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Metric) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Metric) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metricAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetricHook registers your hook function for all future operations.
func AddMetricHook(hookPoint boil.HookPoint, metricHook MetricHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metricAfterSelectHooks = append(metricAfterSelectHooks, metricHook)
	case boil.BeforeInsertHook:
		metricBeforeInsertHooks = append(metricBeforeInsertHooks, metricHook)
	case boil.AfterInsertHook:
		metricAfterInsertHooks = append(metricAfterInsertHooks, metricHook)
	case boil.BeforeUpdateHook:
		metricBeforeUpdateHooks = append(metricBeforeUpdateHooks, metricHook)
	case boil.AfterUpdateHook:
		metricAfterUpdateHooks = append(metricAfterUpdateHooks, metricHook)
	case boil.BeforeDeleteHook:
		metricBeforeDeleteHooks = append(metricBeforeDeleteHooks, metricHook)
	case boil.AfterDeleteHook:
		metricAfterDeleteHooks = append(metricAfterDeleteHooks, metricHook)
	case boil.BeforeUpsertHook:
		metricBeforeUpsertHooks = append(metricBeforeUpsertHooks, metricHook)
	case boil.AfterUpsertHook:
		metricAfterUpsertHooks = append(metricAfterUpsertHooks, metricHook)
	}
}

// One returns a single metric record from the query.
func (q metricQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Metric, error) {
	o := &Metric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for metric")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Metric records from the query.
func (q metricQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetricSlice, error) {
	var o []*Metric

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Metric slice")
	}

	if len(metricAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Metric records in the query.
func (q metricQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count metric rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metricQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if metric exists")
	}

	return count > 0, nil
}

// Configs retrieves all the config's Configs with an executor.
func (o *Metric) Configs(mods ...qm.QueryMod) configQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config\".\"metric_id\"=?", o.ID),
	)

	return Configs(queryMods...)
}

// Logs retrieves all the log's Logs with an executor.
func (o *Metric) Logs(mods ...qm.QueryMod) logQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"log\".\"metric_id\"=?", o.ID),
	)

	return Logs(queryMods...)
}

// LoadConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metricL) LoadConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetric interface{}, mods queries.Applicator) error {
	var slice []*Metric
	var object *Metric

	if singular {
		var ok bool
		object, ok = maybeMetric.(*Metric)
		if !ok {
			object = new(Metric)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetric))
			}
		}
	} else {
		s, ok := maybeMetric.(*[]*Metric)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetric))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config`),
		qm.WhereIn(`config.metric_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(configAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Configs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configR{}
			}
			foreign.R.Metric = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MetricID {
				local.R.Configs = append(local.R.Configs, foreign)
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.Metric = local
				break
			}
		}
	}

	return nil
}

// LoadLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metricL) LoadLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetric interface{}, mods queries.Applicator) error {
	var slice []*Metric
	var object *Metric

	if singular {
		var ok bool
		object, ok = maybeMetric.(*Metric)
		if !ok {
			object = new(Metric)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetric))
			}
		}
	} else {
		s, ok := maybeMetric.(*[]*Metric)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetric))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`log`),
		qm.WhereIn(`log.metric_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load log")
	}

	var resultSlice []*Log
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for log")
	}

	if len(logAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Logs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &logR{}
			}
			foreign.R.Metric = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MetricID {
				local.R.Logs = append(local.R.Logs, foreign)
				if foreign.R == nil {
					foreign.R = &logR{}
				}
				foreign.R.Metric = local
				break
			}
		}
	}

	return nil
}

// AddConfigs adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Configs.
// Sets related.R.Metric appropriately.
func (o *Metric) AddConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Config) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MetricID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"metric_id"}),
				strmangle.WhereClause("\"", "\"", 0, configPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MetricID = o.ID
		}
	}

	if o.R == nil {
		o.R = &metricR{
			Configs: related,
		}
	} else {
		o.R.Configs = append(o.R.Configs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configR{
				Metric: o,
			}
		} else {
			rel.R.Metric = o
		}
	}
	return nil
}

// AddLogs adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Logs.
// Sets related.R.Metric appropriately.
func (o *Metric) AddLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Log) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MetricID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"metric_id"}),
				strmangle.WhereClause("\"", "\"", 0, logPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MetricID = o.ID
		}
	}

	if o.R == nil {
		o.R = &metricR{
			Logs: related,
		}
	} else {
		o.R.Logs = append(o.R.Logs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &logR{
				Metric: o,
			}
		} else {
			rel.R.Metric = o
		}
	}
	return nil
}

// Metrics retrieves all the records using an executor.
func Metrics(mods ...qm.QueryMod) metricQuery {
	mods = append(mods, qm.From("\"metric\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"metric\".*"})
	}

	return metricQuery{q}
}

// FindMetric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetric(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Metric, error) {
	metricObj := &Metric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metric\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, metricObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from metric")
	}

	if err = metricObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metricObj, err
	}

	return metricObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Metric) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no metric provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metricColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metricInsertCacheMut.RLock()
	cache, cached := metricInsertCache[key]
	metricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metricAllColumns,
			metricColumnsWithDefault,
			metricColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, metricGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metricType, metricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metric\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metric\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into metric")
	}

	if !cached {
		metricInsertCacheMut.Lock()
		metricInsertCache[key] = cache
		metricInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Metric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Metric) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metricUpdateCacheMut.RLock()
	cache, cached := metricUpdateCache[key]
	metricUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metricAllColumns,
			metricPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, metricGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update metric, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metric\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, metricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, append(wl, metricPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update metric row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for metric")
	}

	if !cached {
		metricUpdateCacheMut.Lock()
		metricUpdateCache[key] = cache
		metricUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metricQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for metric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for metric")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetricSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"metric\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metricPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in metric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all metric")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Metric) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no metric provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metricColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metricUpsertCacheMut.RLock()
	cache, cached := metricUpsertCache[key]
	metricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			metricAllColumns,
			metricColumnsWithDefault,
			metricColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			metricAllColumns,
			metricPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert metric, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metricPrimaryKeyColumns))
			copy(conflict, metricPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"metric\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metricType, metricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert metric")
	}

	if !cached {
		metricUpsertCacheMut.Lock()
		metricUpsertCache[key] = cache
		metricUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Metric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Metric) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Metric provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metricPrimaryKeyMapping)
	sql := "DELETE FROM \"metric\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from metric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for metric")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metricQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no metricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from metric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for metric")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetricSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metricBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"metric\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metricPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from metric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for metric")
	}

	if len(metricAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Metric) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetric(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetricSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"metric\".* FROM \"metric\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metricPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MetricSlice")
	}

	*o = slice

	return nil
}

// MetricExists checks if the Metric row exists.
func MetricExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"metric\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if metric exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LogComment is an object representing the database table.
type LogComment struct {
	ID      int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	LogID   int64  `boil:"log_id" json:"log_id" toml:"log_id" yaml:"log_id"`
	Comment string `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`

	R *logCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L logCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LogCommentColumns = struct {
	ID      string
	LogID   string
	Comment string
}{
	ID:      "id",
	LogID:   "log_id",
	Comment: "comment",
}

var LogCommentTableColumns = struct {
	ID      string
	LogID   string
	Comment string
}{
	ID:      "log_comment.id",
	LogID:   "log_comment.log_id",
	Comment: "log_comment.comment",
}

// Generated where

var LogCommentWhere = struct {
	ID      whereHelperint64
	LogID   whereHelperint64
	Comment whereHelperstring
}{
	ID:      whereHelperint64{field: "\"log_comment\".\"id\""},
	LogID:   whereHelperint64{field: "\"log_comment\".\"log_id\""},
	Comment: whereHelperstring{field: "\"log_comment\".\"comment\""},
}

// LogCommentRels is where relationship names are stored.
var LogCommentRels = struct {
	Log string
}{
	Log: "Log",
}

// logCommentR is where relationships are stored.
type logCommentR struct {
	Log *Log `boil:"Log" json:"Log" toml:"Log" yaml:"Log"`
}

// NewStruct creates a new relationship struct
func (*logCommentR) NewStruct() *logCommentR {
	return &logCommentR{}
}

func (r *logCommentR) GetLog() *Log {
	if r == nil {
		return nil
	}
	return r.Log
}

// logCommentL is where Load methods for each relationship are stored.
type logCommentL struct{}

var (
	logCommentAllColumns            = []string{"id", "log_id", "comment"}
	logCommentColumnsWithoutDefault = []string{"log_id", "comment"}
	logCommentColumnsWithDefault    = []string{"id"}
	logCommentPrimaryKeyColumns     = []string{"id"}
	logCommentGeneratedColumns      = []string{"id"}
)

type (
	// LogCommentSlice is an alias for a slice of pointers to LogComment.
	// This should almost always be used instead of []LogComment.
	LogCommentSlice []*LogComment
	// LogCommentHook is the signature for custom LogComment hook methods
	LogCommentHook func(context.Context, boil.ContextExecutor, *LogComment) error

	logCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	logCommentType                 = reflect.TypeOf(&LogComment{})
	logCommentMapping              = queries.MakeStructMapping(logCommentType)
	logCommentPrimaryKeyMapping, _ = queries.BindMapping(logCommentType, logCommentMapping, logCommentPrimaryKeyColumns)
	logCommentInsertCacheMut       sync.RWMutex
	logCommentInsertCache          = make(map[string]insertCache)
	logCommentUpdateCacheMut       sync.RWMutex
	logCommentUpdateCache          = make(map[string]updateCache)
	logCommentUpsertCacheMut       sync.RWMutex
	logCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var logCommentAfterSelectHooks []LogCommentHook

var logCommentBeforeInsertHooks []LogCommentHook
var logCommentAfterInsertHooks []LogCommentHook

var logCommentBeforeUpdateHooks []LogCommentHook
var logCommentAfterUpdateHooks []LogCommentHook

var logCommentBeforeDeleteHooks []LogCommentHook
var logCommentAfterDeleteHooks []LogCommentHook

var logCommentBeforeUpsertHooks []LogCommentHook
var logCommentAfterUpsertHooks []LogCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LogComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LogComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LogComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LogComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LogComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LogComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LogComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LogComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LogComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLogCommentHook registers your hook function for all future operations.
func AddLogCommentHook(hookPoint boil.HookPoint, logCommentHook LogCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		logCommentAfterSelectHooks = append(logCommentAfterSelectHooks, logCommentHook)
	case boil.BeforeInsertHook:
		logCommentBeforeInsertHooks = append(logCommentBeforeInsertHooks, logCommentHook)
	case boil.AfterInsertHook:
		logCommentAfterInsertHooks = append(logCommentAfterInsertHooks, logCommentHook)
	case boil.BeforeUpdateHook:
		logCommentBeforeUpdateHooks = append(logCommentBeforeUpdateHooks, logCommentHook)
	case boil.AfterUpdateHook:
		logCommentAfterUpdateHooks = append(logCommentAfterUpdateHooks, logCommentHook)
	case boil.BeforeDeleteHook:
		logCommentBeforeDeleteHooks = append(logCommentBeforeDeleteHooks, logCommentHook)
	case boil.AfterDeleteHook:
		logCommentAfterDeleteHooks = append(logCommentAfterDeleteHooks, logCommentHook)
	case boil.BeforeUpsertHook:
		logCommentBeforeUpsertHooks = append(logCommentBeforeUpsertHooks, logCommentHook)
	case boil.AfterUpsertHook:
		logCommentAfterUpsertHooks = append(logCommentAfterUpsertHooks, logCommentHook)
	}
}

// One returns a single logComment record from the query.
func (q logCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LogComment, error) {
	o := &LogComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for log_comment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LogComment records from the query.
func (q logCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (LogCommentSlice, error) {
	var o []*LogComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to LogComment slice")
	}

	if len(logCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LogComment records in the query.
func (q logCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count log_comment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q logCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if log_comment exists")
	}

	return count > 0, nil
}

// Log pointed to by the foreign key.
func (o *LogComment) Log(mods ...qm.QueryMod) logQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LogID),
	}

	queryMods = append(queryMods, mods...)

	return Logs(queryMods...)
}

// LoadLog allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (logCommentL) LoadLog(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLogComment interface{}, mods queries.Applicator) error {
	var slice []*LogComment
	var object *LogComment

	if singular {
		var ok bool
		object, ok = maybeLogComment.(*LogComment)
		if !ok {
			object = new(LogComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLogComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLogComment))
			}
		}
	} else {
		s, ok := maybeLogComment.(*[]*LogComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLogComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLogComment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &logCommentR{}
		}
		args = append(args, object.LogID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &logCommentR{}
			}

			for _, a := range args {
				if a == obj.LogID {
					continue Outer
				}
			}

			args = append(args, obj.LogID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`log`),
		qm.WhereIn(`log.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Log")
	}

	var resultSlice []*Log
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for log")
	}

	if len(logCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Log = foreign
		if foreign.R == nil {
			foreign.R = &logR{}
		}
		foreign.R.LogComment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LogID == foreign.ID {
				local.R.Log = foreign
				if foreign.R == nil {
					foreign.R = &logR{}
				}
				foreign.R.LogComment = local
				break
			}
		}
	}

	return nil
}

// SetLog of the logComment to the related item.
// Sets o.R.Log to related.
// Adds o to related.R.LogComment.
func (o *LogComment) SetLog(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Log) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"log_comment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"log_id"}),
		strmangle.WhereClause("\"", "\"", 0, logCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LogID = related.ID
	if o.R == nil {
		o.R = &logCommentR{
			Log: related,
		}
	} else {
		o.R.Log = related
	}

	if related.R == nil {
		related.R = &logR{
			LogComment: o,
		}
	} else {
		related.R.LogComment = o
	}

	return nil
}

// LogComments retrieves all the records using an executor.
func LogComments(mods ...qm.QueryMod) logCommentQuery {
	mods = append(mods, qm.From("\"log_comment\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"log_comment\".*"})
	}

	return logCommentQuery{q}
}

// FindLogComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLogComment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*LogComment, error) {
	logCommentObj := &LogComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"log_comment\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, logCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from log_comment")
	}

	if err = logCommentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return logCommentObj, err
	}

	return logCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LogComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no log_comment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(logCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	logCommentInsertCacheMut.RLock()
	cache, cached := logCommentInsertCache[key]
	logCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			logCommentAllColumns,
			logCommentColumnsWithDefault,
			logCommentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, logCommentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(logCommentType, logCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(logCommentType, logCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"log_comment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"log_comment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into log_comment")
	}

	if !cached {
		logCommentInsertCacheMut.Lock()
		logCommentInsertCache[key] = cache
		logCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LogComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LogComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	logCommentUpdateCacheMut.RLock()
	cache, cached := logCommentUpdateCache[key]
	logCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			logCommentAllColumns,
			logCommentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, logCommentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update log_comment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"log_comment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, logCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(logCommentType, logCommentMapping, append(wl, logCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update log_comment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for log_comment")
	}

	if !cached {
		logCommentUpdateCacheMut.Lock()
		logCommentUpdateCache[key] = cache
		logCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q logCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for log_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for log_comment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LogCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"log_comment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, logCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in logComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all logComment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LogComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no log_comment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(logCommentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	logCommentUpsertCacheMut.RLock()
	cache, cached := logCommentUpsertCache[key]
	logCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			logCommentAllColumns,
			logCommentColumnsWithDefault,
			logCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			logCommentAllColumns,
			logCommentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert log_comment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(logCommentPrimaryKeyColumns))
			copy(conflict, logCommentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"log_comment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(logCommentType, logCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(logCommentType, logCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert log_comment")
	}

	if !cached {
		logCommentUpsertCacheMut.Lock()
		logCommentUpsertCache[key] = cache
		logCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LogComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LogComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no LogComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), logCommentPrimaryKeyMapping)
	sql := "DELETE FROM \"log_comment\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from log_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for log_comment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q logCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no logCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from log_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for log_comment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LogCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(logCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"log_comment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, logCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from logComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for log_comment")
	}

	if len(logCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LogComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLogComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LogCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LogCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"log_comment\".* FROM \"log_comment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, logCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in LogCommentSlice")
	}

	*o = slice

	return nil
}

// LogCommentExists checks if the LogComment row exists.
func LogCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"log_comment\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if log_comment exists")
	}

	return exists, nil
}
